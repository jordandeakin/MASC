function exampleSimulation()
%% This function shows the example input expected by the function MASC_Model.
% parameters - a struct array containing the parameters for the model
% (including the attribute weights). 
% settings - a struct array containing the following fields (n = number of
% options, m = number of attrbutes, maxSteps = maximum iterations for the
% model).
% attValues = the attribute values for the presented options. 
% s = subject
% model = search rule to be used. See MASC_Model for different search
% rules. 

% MASC_Model(settings,parameters,attValues,s,model)

% settings struct
n = 2; % nOptions
m = 3; % nAttributes
settings.n = n;
settings.m = m;
settings.maxSteps = 100;

%fixed parameters
% Each entry corresponds to one subject.
model = 1; 
nSubj = 12;
nTrials = 100;
parameters.lambdaPrior = 1; %prior precision (true precision of standardized attribute values is always 1)
parameters.thresh = zeros(nSubj,1)+0.01; %initial threshold (currently fixed, but could be free; therefore defined per subj)
parameters.thresh1 = zeros(1,nSubj); %for absolute threshold variant
parameters.thresh2 = zeros(nSubj,1)+0.01; %for absolute threshold variant


% MASC_Create creates random data and parameters in the format expected
% by MASC. Adapt to your own data accordingly (below).
[dat,parameters] = MASC_Create(model,nSubj,nTrials,n,m,parameters); %create new dataset


%% Adding your own data. 
% Attvalues is a n x m x nTrials x nSubj matrix.
attValues = dat.attValues;

% The weights are a m x nSubj matrix. 
% This should be added to the parameters struct as parameters.w.
weights = parameters.w;

% The model outputs the choice, number of fixations and the fixation paths
% for each trial.
% The numbers in allFix (fixation paths) correspond to the numbers in
% OAPMatrix, where each row is an option and each column is an attribute. 
OAPmatrix = reshape(1:n*m,n,m); %"option-attribute pair"



for s = 1:nSubj
for t = 1:nTrials
[choice(t,s), nFix(t,s), allFix(:,t,s)] = MASC_Model(settings,parameters,attValues,s,model);

% Calculating the proportion of fixations to each attribute. 
% 1 3 5 = Option 1, 2 4 6 = Option 2. 
propFix(:,t,s) = histcounts(allFix(:,t,s),1:(n*m+1))./sum(histcounts(allFix(:,t,s),1:(n*m+1)));
end

figure(1)
nexttile(s)
histogram(nFix(choice(:,s) == 1,s),'FaceColor','g','BinWidth',1);
hold on
histogram(nFix(choice(:,s) == 2,s),'FaceColor','r','BinWidth',1);
title(sprintf('Subject %d',s))
sgtitle("Predicted Number of Fixations")

mPropFix = mean(propFix(:,:,s),2);
figure(3)
nexttile(s)
heatmap([mPropFix(OAPmatrix(1,:))'; mPropFix(OAPmatrix(2,:))']);
end



figure(2)
y(:,1) = mean(choice == 1);
y(:,2) = 1-y(:,1);
b = bar(1:nSubj, y,'stacked');
b(1).FaceColor = 'g';
b(2).FaceColor = 'r';
xlabel('Subject')
ylabel('p(Choice)')
legend('Choice = Option 1','Choice = Option 2')
sgtitle('Predicted Choice Probability')








